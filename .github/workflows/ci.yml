name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Ruby and dependencies
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: "3.4"
      - name: Install shfmt
        run: sudo apt-get install shfmt
      - run: make lint-scripts
      - run: make check-format
      - run: make lint-ruby

  hatchet:
    name: "Hatchet (${{ matrix.stack }})"
    runs-on: ubuntu-22.04
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        stack: ["heroku-22", "heroku-24"]
    env:
      HATCHET_APP_LIMIT: 100
      PARALLEL_SPLIT_TEST_PROCESSES: 8
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_API_USER: ${{ secrets.HEROKU_API_USER }}
      HEROKU_DISABLE_AUTOUPDATE: 1
      HATCHET_BUILDPACK_BASE: https://github.com/heroku/heroku-buildpack-jvm-common
      HATCHET_DEFAULT_STACK: ${{ matrix.stack }}
      JVM_COMMON_BUILDPACK_TARBALL: https://api.github.com/repos/heroku/heroku-buildpack-jvm-common/tarball/${{ github.head_ref || github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Ruby and dependencies
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: "3.3"
      - name: Hatchet setup
        run: bundle exec hatchet ci:setup
      - name: Run Hatchet integration tests
        run: bundle exec parallel_split_test test/spec/

  unit-tests:
    name: "Unit Tests (${{ matrix.stack }})"
    runs-on: ubuntu-22.04
    needs: lint
    container:
      image: "${{ fromJson('{ \"heroku-22\": \"heroku/heroku:22\", \"heroku-24\": \"heroku/heroku:24\" }')[matrix.stack] }}"
      options: --user root
      env:
        STACK: ${{ matrix.stack }}
    strategy:
      matrix:
        stack: ["heroku-22", "heroku-24"]
    steps:
      - uses: actions/checkout@v4
      - run: test/jdbc.sh

  container-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # These test both the local development `make run` workflow and that `bin/report` completes successfully
      # for both passing and failing builds (since `bin/report` can't easily be tested via Hatchet tests).
      - name: Run buildpack using default app fixture
        run: make run
      #- name: Run buildpack using an app fixture that's expected to fail
      #  run: make run FIXTURE=spec/fixtures/failing/

  validate-inventory:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Determine if inventory.json changed
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5
        id: changed-files
        with:
          files: inventory.json
      - name: Validate inventory.json contents
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          set -euo pipefail

          artifacts=$(cat inventory.json | jq -c -r '.artifacts[]')

          for artifact in $artifacts; do
            url=$(echo "${artifact}" | jq -r '.url')

            # This script assumes the usage of SHA256 as the digest as we currently only use SHA256
            # in JVM inventory files. Should this ever change, this script will fail with a checksum
            # error, but will not let unknown digests pass silently. This makes it a safe assumption and
            # simplifies the script.
            sha256_checksum=$(echo "${artifact}" | jq -r '.checksum[7:]')

            echo -n "${url}... "

            temp_file=$(mktemp)

            if ! curl --silent --fail -o "${temp_file}" "${url}"; then
              echo "DOWNLOAD ERROR"
              exit 1
            fi

            actual_sha256_checksum=$(shasum -a256 "${temp_file}" | cut -d' ' -f1)
            if [[ "${actual_sha256_checksum}" == "${sha256_checksum}" ]]; then
              echo "OK"
            else
              echo "CHECKSUM ERROR"
              exit 1
            fi

            rm "${temp_file}"
          done
