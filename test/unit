#!/usr/bin/env bash

BUILDPACK_DIR="${BUILDPACK_DIR:-$(pwd)}"

test_get_jdk_version() {
	echo "java.runtime.version=1.8" >"${BUILD_DIR}/system.properties"
	assertEquals "1.8" "$(get_jdk_version "$BUILD_DIR")"
}

test_get_jdk_version_spaces() {
	echo "java.runtime.version = 11  " >"${BUILD_DIR}/system.properties"
	assertEquals "11" "$(get_jdk_version "$BUILD_DIR")"
}

test_get_jdk_version_newline() {
	cat <<EOF >"${BUILD_DIR}/system.properties"
java.runtime.version=11
maven.version=3.5.4
EOF
	assertEquals "11" "$(get_jdk_version "$BUILD_DIR")"
}

test_get_full_jdk_version() {
	assertEquals "${DEFAULT_JDK_1_7_VERSION}" "$(get_full_jdk_version "1.7")"
	assertEquals "${DEFAULT_JDK_1_8_VERSION}" "$(get_full_jdk_version "1.8")"
	assertEquals "${DEFAULT_JDK_1_9_VERSION}" "$(get_full_jdk_version "1.9")"
	assertEquals "${DEFAULT_JDK_1_9_VERSION}" "$(get_full_jdk_version "9")"
	assertEquals "${DEFAULT_JDK_10_VERSION}" "$(get_full_jdk_version "10")"
	assertEquals "${DEFAULT_JDK_11_VERSION}" "$(get_full_jdk_version "11")"
	assertEquals "${DEFAULT_JDK_12_VERSION}" "$(get_full_jdk_version "12")"
	assertEquals "${DEFAULT_JDK_13_VERSION}" "$(get_full_jdk_version "13")"
	assertEquals "1.8.0_212" "$(get_full_jdk_version "1.8.0_212")"
	assertEquals "11.0.5" "$(get_full_jdk_version "11.0.5")"
	assertEquals "zulu-11.0.5" "$(get_full_jdk_version "zulu-11.0.5")"
}

test_get_jdk_version_8_222() {
	echo "java.runtime.version=1.8.0_222" >"${BUILD_DIR}/system.properties"
	assertEquals "1.8.0_222" "$(get_jdk_version "$BUILD_DIR")"
}

test_get_jdk_version_11() {
	echo "java.runtime.version=11" >"${BUILD_DIR}/system.properties"
	assertEquals "11" "$(get_jdk_version "$BUILD_DIR")"
}

test_get_jdk_version_11_0_4() {
	echo "java.runtime.version=11.0.4" >"${BUILD_DIR}/system.properties"
	assertEquals "11.0.4" "$(get_jdk_version "$BUILD_DIR")"
}

test_get_jdk_version_zulu() {
	echo "java.runtime.version=zulu-1.8.0_212" >"${BUILD_DIR}/system.properties"
	assertEquals "zulu-1.8.0_212" "$(get_jdk_version "$BUILD_DIR")"
}

test_bp_jvm_version() {
	rm -f "${BUILD_DIR}/system.properties"
	export BP_JVM_VERSION="8.*"
	assertEquals "8" "$(get_jdk_version "$BUILD_DIR")"
	export BP_JVM_VERSION="8.0.252"
	assertEquals "1.8.0_252" "$(get_jdk_version "$BUILD_DIR")"
	export BP_JVM_VERSION="11.*"
	assertEquals "11" "$(get_jdk_version "$BUILD_DIR")"
	export BP_JVM_VERSION="11.0.7"
	assertEquals "11.0.7" "$(get_jdk_version "$BUILD_DIR")"
	unset BP_JVM_VERSION
}

test_get_jdk_url() {
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_1_8_VERSION:?}.tar.gz" "$(get_jdk_url "")"
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_1_7_VERSION:?}.tar.gz" "$(get_jdk_url "1.7")"
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_1_8_VERSION:?}.tar.gz" "$(get_jdk_url "1.8")"
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_1_9_VERSION:?}.tar.gz" "$(get_jdk_url "9")"
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_10_VERSION:?}.tar.gz" "$(get_jdk_url "10")"
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_11_VERSION:?}.tar.gz" "$(get_jdk_url "11")"
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_12_VERSION:?}.tar.gz" "$(get_jdk_url "12")"
	assertEquals "${JDK_BASE_URL:?}/openjdk${DEFAULT_JDK_13_VERSION:?}.tar.gz" "$(get_jdk_url "13")"
	assertEquals "${JDK_BASE_URL:?}/openjdk1.7.0_192.tar.gz" "$(get_jdk_url "1.7.0_192")"
	assertEquals "${JDK_BASE_URL:?}/openjdk1.8.0_222.tar.gz" "$(get_jdk_url "1.8.0_222")"
	assertEquals "${JDK_BASE_URL:?}/openjdk1.8.0_191.tar.gz" "$(get_jdk_url "1.8.0_191")"
	assertEquals "${JDK_BASE_URL:?}/openjdk11.0.0.tar.gz" "$(get_jdk_url "11.0.0")"
	assertEquals "${JDK_BASE_URL:?}/zulu-1.8.0_212.tar.gz" "$(get_jdk_url "zulu-1.8.0_212")"
	assertEquals "${JDK_BASE_URL:?}/zulu-11.0.5.tar.gz" "$(get_jdk_url "zulu-11.0.5")"
	assertEquals "${JDK_BASE_URL:?}/openjdk1.8.0_212.tar.gz" "$(get_jdk_url "openjdk-1.8.0_212")"
}

test_install_jdk_overlay() {
	local jdk_dir
	jdk_dir="$(mktemp -d)"

	mkdir -p "${jdk_dir}/jre/bin"
	touch "${jdk_dir}/jre/bin/java"
	mkdir -p "${BUILD_DIR}/.jdk-overlay/jre/lib/security"
	mkdir -p "${BUILD_DIR}/.jdk-overlay/jre/bin"
	touch "${BUILD_DIR}/.jdk-overlay/jre/lib/security/policy.jar"
	echo "." >"${BUILD_DIR}/.jdk-overlay/jre/lib/security/cacerts"
	capture install_jdk_overlay "${jdk_dir}" "${BUILD_DIR}"
	assertTrue "Files in .jdk-overlay should be copied to .jdk." "[ -f ${jdk_dir}/jre/lib/security/policy.jar ]"
	assertTrue "Files in .jdk should not be overwritten." "[ -f ${jdk_dir}/jre/bin/java ]"
}

test_install_profile() {
	unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test

	local profileDir
	profileDir="$(mktemp -d)"

	capture install_profile "${BUILDPACK_DIR}" "${profileDir}"
	assertCapturedSuccess
	assertTrue "[ -f ${profileDir}/jvmcommon.sh ]"
}

testGetAppSystemProperty() {
	cat >"${BUILD_DIR}/app.system" <<EOF
jvm.major.version=1.8
EOF
	assertEquals "1.8" "$(_get_system_property "${BUILD_DIR}/app.system" "jvm.major.version")"
}

test_get_system_property_with_whitespace() {
	cat >"${BUILD_DIR}/app.system" <<EOF

jvm.major.version    =        1.8


EOF
	assertEquals "1.8" "$(_get_system_property "${BUILD_DIR}/app.system" "jvm.major.version")"
}

testGetAppSystemPropertyWithSimilarName() {
	cat >"${BUILD_DIR}/app.system" <<EOF
jvm.major.versions=1.8
EOF
	assertEquals "" "$(_get_system_property "${BUILD_DIR}/app.system" "jvm.major.version")"

}

test_bp_layer_has_key_no() {
	local mockLayer="${LAYERS_DIR}/test"
	mkdir -p "${mockLayer}"
	touch "${mockLayer}.toml"

	{
		echo "[metadata]"
		echo "version = \"1.8.0_202\""
		echo "cache_id = \"foobar\""
	} >>"${mockLayer}.toml"

	bp_layer_has_key "$mockLayer" ".metadata.cache_id" "quack"
	assertEquals 1 "$?"
}

test_bp_layer_has_key_no_file() {
	local mockLayersDir
	mockLayersDir="$(mktemp -d)"

	local expectedCacheId="foobar123"

	bp_layer_has_key "${mockLayersDir}/test" ".metadata.cache_id" "$expectedCacheId"
	assertEquals 1 "$?"
}

test_bp_layer_has_key_yes() {
	local mockLayer="${LAYERS_DIR}/test"
	local expectedCacheId="foobar123"
	mkdir -p "${mockLayer}"
	touch "${mockLayer}.toml"

	{
		echo "[metadata]"
		echo "version = \"1.8.0_202\""
		echo "cache_id = \"${expectedCacheId}\""
	} >>"${mockLayer}.toml"

	bp_layer_has_key "$mockLayer" ".metadata.cache_id" "$expectedCacheId"
	assertEquals 0 "$?"
}

test_install_jre() {
	jdk_dir="${LAYERS_DIR}/jdk"
	jre_dir="${LAYERS_DIR}/jre"
	mkdir -p "${jdk_dir}/bin"
	touch "${jdk_dir}/bin/java"
	mkdir -p "${jre_dir}"
	touch "${jre_dir}.toml"
	install_jre "${jdk_dir}" "${jre_dir}"
	assertFileExists "${jre_dir}/bin/java"
	assertFileExists "${jre_dir}.toml"
}

# the modules to be tested
# shellcheck source=lib/jvm.sh
source "${BUILDPACK_DIR}/lib/jvm.sh"
# shellcheck source=lib/v3/buildpack.sh
source "${BUILDPACK_DIR}/lib/v3/buildpack.sh"

# testing utils
# shellcheck source=test/utils
source "${BUILDPACK_DIR}/test/utils"
installToolbox

# import the testing framework
# shellcheck source=test/vendor/shunit2
source "${BUILDPACK_DIR}/test/vendor/shunit2"
