#!/usr/bin/env bash

BUILDPACK_HOME="${BUILDPACK_HOME:-$(pwd)}"

testDetect() {
  detect "${BUILD_DIR}"

  assertAppDetected "JVM Common"
}

testDetect_OldMavenPlugin() {
  touch "${BUILD_DIR}/pom.xml"
  mkdir "${BUILD_DIR}/target"

  detect

  assertAppDetected "heroku-maven-plugin"

  rm -f "${BUILD_DIR}/pom.xml"
  rm -rf "${BUILD_DIR}/target"
}

testDetect_OldSbtPlugin() {
  mkdir -p "${BUILD_DIR}/target/universal/stage"

  detect

  assertAppDetected "sbt-heroku"

  rm -rf "${BUILD_DIR}/target/universal/stage"
}

testDetect_OldLeinPlugin() {
  touch "${BUILD_DIR}/project.clj"
  mkdir "${BUILD_DIR}/target"

  detect

  assertAppDetected "lein-heroku"

  rm -f "${BUILD_DIR}/project.clj"
  rm -rf "${BUILD_DIR}/target"
}

testDetect_MavenPlugin() {
  echo "client=heroku-maven-plugin" >"${BUILD_DIR}/.heroku-deploy"

  detect

  assertAppDetected "heroku-maven-plugin"

  rm -f "${BUILD_DIR}/.heroku-deploy"
}

testDetect_GradlePlugin() {
  echo "client=heroku-gradle" >"${BUILD_DIR}/.heroku-deploy"

  detect

  assertAppDetected "heroku-gradle"

  rm -f "${BUILD_DIR}/.heroku-deploy"
}

testDetect_GradlePlugin() {
  echo "client=heroku-cli-deploy" >"${BUILD_DIR}/.heroku-deploy"
  touch "${BUILD_DIR}/pom.xml"
  mkdir "${BUILD_DIR}/target"

  detect

  assertAppDetected "heroku-cli-deploy"
}

test_install_metrics_agent() {
  local install_dir
  install_dir="$(mktemp -d)"

  local profile_dir
  profile_dir="$(mktemp -d)"

  install_metrics_agent "${BUILDPACK_HOME}" "${install_dir}" "${profile_dir}"
  assertFileExists "${profile_dir}/heroku-jvm-metrics.sh"
  assertFileExists "${install_dir}/heroku-metrics-agent.jar"
}

test_install_metrics_agent_fail() {
  local install_dir
  install_dir="$(mktemp -d)"

  local profile_dir
  profile_dir="$(mktemp -d)"

  export HEROKU_METRICS_JAR_URL="https://89erfhuisffuds.com"
  install_metrics_agent "${BUILDPACK_HOME}" "${install_dir}" "${profile_dir}"
  assertFileDoesNotExist "${profile_dir}/heroku-jvm-metrics.sh"
  assertFileDoesNotExist "${install_dir}/heroku-metrics-agent.jar"
  unset HEROKU_METRICS_JAR_URL
}

test_installDefaultJava() {
  unset CI
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  capture install_java "${BUILD_DIR}"
  assertCapturedSuccess
  assertTrue "A .jdk directory should be created when installing java." "[ -d ${BUILD_DIR}/.jdk ]"
  assertTrue "The java runtime should be present." "[ -f ${BUILD_DIR}/.jdk/bin/java ]"
  assertEquals "$(find "${BUILD_DIR}" -name jdk.tar.gz | wc -l | sed 's/ //g')" "0" # make sure there's no tarball left in the slug
  assertEquals "${BUILD_DIR}/.jdk" "${JAVA_HOME}"
  assertContains "${PATH}" "${BUILD_DIR}/.jdk/bin"
  assertTrue "A version file should have been created." "[ -f ${BUILD_DIR}/.jdk/version ]"
  assertEquals "$(cat "${BUILD_DIR}/.jdk/version")" "${DEFAULT_JDK_VERSION}"

  # shellcheck disable=SC2164
  cd # unsure why, but this fixes `sh: 0: getcwd() failed: No such file or directory` because $BUILD_DIR get deleted out from under us

  assertEquals "${BUILD_DIR}/.jdk/bin/java" "$(command -v java)"
  assertTrue "A profile.d file should have been created." "[ -f ${BUILD_DIR}/.profile.d/jvmcommon.sh ]"
  assertTrue "A pgconfig.jar should exist in the JDK" "[ -f ${BUILD_DIR}/.jdk/jre/lib/ext/pgconfig.jar ]"
}

test_installJavaCI() {
  export CI="true"
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  capture install_java "${BUILD_DIR}"
  assertCapturedSuccess
  assertTrue "A pgconfig.jar should exist in the JDK" "[ ! -f ${BUILD_DIR}/.jdk/jre/lib/ext/pgconfig.jar ]"
  unset CI
}

test_installJavaWithVersion() {
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  capture install_java "${BUILD_DIR}" "1.8.0_265"
  assertTrue "A .jdk directory should be created when installing java." "[ -d ${BUILD_DIR}/.jdk ]"
  assertTrue "The java runtime should be present." "[ -f ${BUILD_DIR}/.jdk/bin/java ]"
  assertEquals "${BUILD_DIR}/.jdk" "${JAVA_HOME}"
  assertContains "${PATH}" "${BUILD_DIR}/.jdk/bin"
  assertTrue "A version file should have been created." "[ -f ${BUILD_DIR}/.jdk/version ]"
  assertEquals "$(cat "${BUILD_DIR}/.jdk/version")" "1.8.0_265"
  assertEquals "${BUILD_DIR}/.jdk/bin/java" "$(command -v java)"
  assertTrue "A profile.d file should have been created." "[ -f ${BUILD_DIR}/.profile.d/jvmcommon.sh ]"
}

test_upgradeFrom1_7To1_8() {
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  capture install_java "${BUILD_DIR}" "1.7"
  assertCapturedSuccess
  assertTrue "Precondition: JDK 7 should have been installed." "[ $(cat "${BUILD_DIR}/.jdk/version") = '1.7' ]"
  assertEquals "${BUILD_DIR}/.jdk/bin/java" "$(command -v java)"

  capture install_java "${BUILD_DIR}" "1.8"
  assertCapturedSuccess
  assertEquals "$(cat "${BUILD_DIR}/.jdk/version")" "1.8"
  assertEquals "${BUILD_DIR}/.jdk/bin/java" "$(command -v java)"
}

test_upgradeFrom1_8To1_7() {
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  capture install_java "${BUILD_DIR}" "1.8"
  assertCapturedSuccess
  assertTrue "Precondition: JDK 8 should have been installed." "[ $(cat "${BUILD_DIR}/.jdk/version") = '1.8' ]"
  assertEquals "${BUILD_DIR}/.jdk/bin/java" "$(command -v java)"

  capture install_java "${BUILD_DIR}" "1.7"
  assertCapturedSuccess
  assertEquals "$(cat "${BUILD_DIR}/.jdk/version")" "1.7"
  assertEquals "${BUILD_DIR}/.jdk/bin/java" "$(command -v java)"
}

test_install_tools() {
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  capture _install_tools "${BUILD_DIR}"
  assertCapturedSuccess
  assertTrue "A with_jmap file should have been created." "[ -f ${BUILD_DIR}/.heroku/bin/with_jmap ]"
  assertTrue "The with_jmap file should be executable." "[ -x ${BUILD_DIR}/.heroku/bin/with_jmap ]"
  assertTrue "A with_jmap java file should have been created." "[ -f ${BUILD_DIR}/.heroku/with_jmap/bin/java ]"
  assertTrue "The with_jmap java file should be executable." "[ -x ${BUILD_DIR}/.heroku/with_jmap/bin/java ]"
  assertTrue "A with_jmap file should have been created." "[ -f ${BUILD_DIR}/.heroku/bin/with_jstack ]"
  assertTrue "The with_jmap file should be executable." "[ -x ${BUILD_DIR}/.heroku/bin/with_jstack ]"
}

test_create_export_script() {
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  capture _create_export_script "/path/to/jdk" "${BUILD_DIR}"
  assertCapturedSuccess
  assertTrue "An export file should be created." "[ -f ${BUILD_DIR}/export ]"
  assertContains "export JAVA_HOME=/path/to/jdk" "$(cat "${BUILD_DIR}/export")"
  assertContains "export PATH=\$JAVA_HOME/bin:\$PATH" "$(cat "${BUILD_DIR}/export")"
}

test_invalidJdkURL() {
  capture install_java "${BUILD_DIR}" "1.8.0_11"
  assertContains "Did not find error message for invalid JDK version" "Unsupported Java version: 1.8.0_11" "$(cat "${STD_OUT}")"
}

test_customJdk() {
  capture install_java "${BUILD_DIR}" "1.8.0_265"
  assertCapturedSuccess
}

test_zuluJdk() {
  capture install_java "${BUILD_DIR}" "zulu-1.8.0_265"
  assertCapturedSuccess
}

test_openJdk() {
  capture install_java "${BUILD_DIR}" "openjdk-1.8.0_265"
  assertCapturedSuccess
}

test_skip_version_cache() {
  assertTrue "Fake dir should not exist." "[ ! -d fake_dir ]"
  capture _cache_version "1.8" "fake_dir"
  assertCapturedSuccess
  assertTrue "Version should not be cached" "[ ! -f fake_dir/system.properties ]"
}

# GPG (positive) tests are disabled for the time being until signatures are rebuilt.
#test_install_jdk_valid() {
#  export HEROKU_GPG_VALIDATION=1
#  capture install_jdk "${JDK_BASE_URL}/openjdk11.0.8.tar.gz" "$(mktemp -d)" "${BUILDPACK_HOME}"
#  assertCapturedSuccess
#  unset HEROKU_GPG_VALIDATION
#}

test_install_jdk_invalid() {
  rm -f ~/.gnupg/*

  local key
  key="$(mktemp)"

  curl -sf -o "${key}" -L "https://www.php.net/distributions/php-keyring.gpg"
  export HEROKU_GPG_VALIDATION=1
  capture install_jdk "${JDK_BASE_URL}/openjdk11.0.8.tar.gz" "$(mktemp -d)" "${BUILDPACK_HOME}" "${key}"
  assertCapturedError " !     ERROR: Invalid GPG signature!"
  unset HEROKU_GPG_VALIDATION
}

test_get_jdk_url_with_default() {
  assertEquals "${JDK_BASE_URL:?}/openjdk1.8.0_265.tar.gz" "$(_get_jdk_url_with_default "1.8.0_265")"

  export JDK_URL_1_8="https://example.com/java8"
  assertEquals "${JDK_URL_1_8}" "$(_get_jdk_url_with_default "1.8.0_265")"
  assertEquals "${JDK_BASE_URL:?}/openjdk1.7.0_272.tar.gz" "$(_get_jdk_url_with_default "1.7.0_272")"
  assertEquals "${JDK_BASE_URL:?}/openjdk11.0.8.tar.gz" "$(_get_jdk_url_with_default "11.0.8")"
  assertEquals "${JDK_BASE_URL:?}/zulu-11.0.8.tar.gz" "$(_get_jdk_url_with_default "zulu-11.0.8")"
  unset JDK_URL_1_8

  export JDK_URL_1_7="https://example.com/java7"
  assertEquals "${JDK_URL_1_7}" "$(_get_jdk_url_with_default "1.7.0_272")"
  assertEquals "${JDK_BASE_URL:?}/openjdk1.8.0_265.tar.gz" "$(_get_jdk_url_with_default "1.8.0_265")"
  unset JDK_URL_1_7

  export JDK_URL_11="https://example.com/java11"
  assertEquals "${JDK_URL_11}" "$(_get_jdk_url_with_default "11.0.8")"
  assertEquals "${JDK_BASE_URL:?}/openjdk1.8.0_265.tar.gz" "$(_get_jdk_url_with_default "1.8.0_265")"
  unset JDK_URL_11
}

# the modules to be tested
# shellcheck source=bin/java
source "${BUILDPACK_HOME}/bin/java"

# testing utils
# shellcheck source=test/utils
source "${BUILDPACK_HOME}/test/utils"

# import the testing framework
# shellcheck source=test/vendor/shunit2
source "${BUILDPACK_HOME}/test/vendor/shunit2"
