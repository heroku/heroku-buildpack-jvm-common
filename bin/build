#!/usr/bin/env bash

appDir="$(pwd)"
bpDir="$(
  cd "$(dirname "$0")/.."
  pwd
)" # absolute path
layersDir="${1:?}"

# shellcheck source=lib/v3/common.sh
source "${bpDir}/lib/v3/common.sh"
# shellcheck source=lib/v3/buildpack.sh
source "${bpDir}/lib/v3/buildpack.sh"
# shellcheck source=lib/jvm.sh
source "${bpDir}/lib/jvm.sh"

status "Installing Java"

# fail hard
set -o pipefail
# fail harder
set -eu

# TODO check the build plan to see if another JDK has already been installed?

bp_install_or_reuse_toolbox "${layersDir}/utils"
export PATH="$PATH:${layersDir}/utils/bin"

jdkVersion="$(get_jdk_version "${appDir}")" # TODO read from build-plan instead

jdkUrl="$(get_jdk_url "${jdkVersion}")"

jdkCacheId="$(get_jdk_cache_id "${jdkUrl}")"

jdkMetadata=$(
  cat <<EOF
version = "${jdkVersion}"
cache_id = "${jdkCacheId}"
EOF
)

if bp_layer_has_key "${layersDir}/jdk" ".metadata.cache_id" "${jdkCacheId}"; then
  info "JDK ${jdkVersion} installed from cache"
  touch "${layersDir}/jdk.toml"
  info "JRE ${jdkVersion} installed from cache"
  touch "${layersDir}/jre.toml"
else
  jdkLayerToml="$(bp_layer_metadata_create "false" "true" "true" "${jdkMetadata}")"
  jdkLayer="$(bp_layer_init "${layersDir}" "jdk" "${jdkLayerToml}")"

  install_jdk "${jdkUrl}" "${jdkLayer}" "${bpDir}"
  install_certs "${jdkLayer}"
  install_profile "${bpDir}" "${jdkLayer}/profile.d"
  install_jdk_overlay "${jdkVersion}" "${jdkLayer}" "${appDir}"
  info "JDK ${jdkVersion} installed"

  jreLayerToml="$(bp_layer_metadata_create "true" "false" "false" "${jdkMetadata}")"
  jreLayer="$(bp_layer_init "${layersDir}" "jre" "${jreLayerToml}")"
  install_jre "${jdkLayer}" "${jreLayer}"
  install_certs "${jreLayer}"
  install_profile "${bpDir}" "${jreLayer}/profile.d"
  info "JRE ${jdkVersion} installed"
fi
