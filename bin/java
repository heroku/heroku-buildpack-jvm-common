#!/usr/bin/env bash

# This script is a utility for v2 buildpacks that manually download this buildpack to use as a library
# The `bin/java` script is meant to be sourced so that functions like `install_java_with_overlay` can
# be invoked.

JVM_COMMON_BUILDPACK_DIR="${JVM_COMMON_BUILDPACK_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)}"

# Some users use this buildpack outside of the Heroku platform where STACK might
# not be set. It should always default to the latest stack.
STACK="${STACK:-"heroku-24"}"

source "${JVM_COMMON_BUILDPACK_DIR}/lib/util.sh"
source "${JVM_COMMON_BUILDPACK_DIR}/lib/output.sh"
source "${JVM_COMMON_BUILDPACK_DIR}/lib/inventory.sh"
source "${JVM_COMMON_BUILDPACK_DIR}/lib/java_properties.sh"

install_openjdk() {
	local build_dir="${1}"
	# Root directory of the buildpack that invoked this function
	local host_buildpack_dir="${2}"

	local openjdk_install_dir="${build_dir}/.jdk"

	if [ -d "${openjdk_install_dir}" ]; then
		_conditional_meta_set "openjdk_version" "provided"
		_conditional_meta_set "openjdk_distribution" "provided"

		output::step "Using provided JDK"

		# This will also skip installation of `.profile.d` scripts and other files. This is intentional to preserve
		# historical behaviour. Since the provided JDK feature will be removed at some later point, there are no plans
		# to change this behaviour.
		return 0
	fi

	local openjdk_version_selector
	openjdk_version_selector="$(java_properties::get "${build_dir}/system.properties" "java.runtime.version")"
	_conditional_meta_set "openjdk_version_selector" "${openjdk_version_selector}"

	if [ -z "${openjdk_version_selector}" ]; then
		if [ "${STACK}" == "heroku-24" ]; then
			# This should always be the latest OpenJDK LTS major version
			# Next LTS will be OpenJDK 25 with a planned release date of 2025-09-16
			openjdk_version_selector="21"

			output::warning <<-EOF
				WARNING: No OpenJDK version specified

				Your application does not explicitly specify an OpenJDK
				version. The latest long-term support (LTS) version will be
				installed. This currently is OpenJDK ${openjdk_version_selector}.

				This default version will change when a new LTS version is
				released. Your application might fail to build with the new
				version. We recommend explicitly setting the required OpenJDK
				version for your application.

				To set the OpenJDK version, add or edit the system.properties
				file in the root directory of your application to contain:

				java.runtime.version = ${openjdk_version_selector}
			EOF
		else
			openjdk_version_selector="1.8"

			output::warning <<-EOF
				WARNING: No OpenJDK version specified

				Your application does not explicitly specify an OpenJDK
				version. OpenJDK ${openjdk_version_selector} will be installed.

				This default version will change at some point. Your
				application might fail to build with the new version. We
				recommend explicitly setting the required OpenJDK version for
				your application.

				To set the OpenJDK version, add or edit the system.properties
				file in the root directory of your application to contain:

				java.runtime.version = ${openjdk_version_selector}
			EOF
		fi
	fi

	if ! openjdk_json=$(inventory::query "${openjdk_version_selector}" "${STACK}"); then
		output::error <<-EOF
			ERROR: Unsupported Java version: ${openjdk_version_selector}

			Please check your system.properties file to ensure the java.runtime.version
			is among the list of supported version on the Dev Center:
			https://devcenter.heroku.com/articles/java-support#supported-java-versions

			If you continue to have trouble, you can open a support ticket here:
			https://help.heroku.com

			Thanks,
			Heroku
		EOF

		return 1
	fi

	local openjdk_version
	openjdk_version=$(jq -r '.version' <<<"${openjdk_json}")

	local openjdk_distribution
	openjdk_distribution=$(jq -r '.metadata.distribution' <<<"${openjdk_json}")

	local openjdk_distribution_name
	case "${openjdk_distribution}" in
	"zulu") openjdk_distribution_name="Azul Zulu OpenJDK" ;;
	"heroku") openjdk_distribution_name="Heroku OpenJDK" ;;
	*) openjdk_distribution_name="OpenJDK" ;;
	esac

	local openjdk_url
	openjdk_url=$(jq -r '.url' <<<"${openjdk_json}")

	_conditional_meta_set "openjdk_version" "${openjdk_version}"
	_conditional_meta_set "openjdk_distribution" "${openjdk_distribution}"

	output::step "Installing ${openjdk_distribution_name} ${openjdk_version}"

	rm -rf "${openjdk_install_dir}"
	mkdir "${openjdk_install_dir}"

	# Download and extract OpenJDK distribution
	local openjdk_install_start_time
	openjdk_install_start_time=$(util::nowms)

	local jdk_tarball="/tmp/jdk.tgz"
	util::curl_with_defaults --retry 3 --silent --show-error --location "${openjdk_url}" --output "${jdk_tarball}"
	tar -pxzf "${jdk_tarball}" -C "${openjdk_install_dir}"
	rm "${jdk_tarball}"

	_conditional_meta_time "openjdk_install_duration" "${openjdk_install_start_time}"

	# Link base image Java keystore into the installed OpenJDK distribution, replacing the bundled
	# certificates. Linking ensures that when the application image is rebased, the certificates are
	# updated for JVM applications, even though the OpenJDK distribution itself doesn't change.
	if [[ -f "/etc/ssl/certs/java/cacerts" ]]; then
		for path in "${openjdk_install_dir}/jre/lib/security/cacerts" "${openjdk_install_dir}/lib/security/cacerts"; do
			if [[ -f "${path}" ]]; then
				mv "${path}" "${path}.old"
				ln -s "/etc/ssl/certs/java/cacerts" "${path}"
			fi
		done
	fi

	# Download Heroku JVM metrics agent JAR
	mkdir -p "${build_dir}/.heroku/bin"
	util::curl_with_defaults --retry 3 -s -o "${build_dir}/.heroku/bin/heroku-metrics-agent.jar" -L "${HEROKU_METRICS_JAR_URL:-"https://repo1.maven.org/maven2/com/heroku/agent/heroku-java-metrics-agent/4.0.1/heroku-java-metrics-agent-4.0.1.jar"}"

	# Copy profile.d scripts
	local profile_d_dir="${build_dir}/.profile.d"
	mkdir -p "${profile_d_dir}"

	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/jvmcommon.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/default-proc-warning.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/jdbc.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/jvm-redis.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/heroku-jvm-metrics.sh" "${profile_d_dir}"

	# Install tool scripts
	cp -r "${JVM_COMMON_BUILDPACK_DIR}/opt/tools/"* "${build_dir}/.heroku"

	# Write export script for subsequent buildpacks to ensure they can use the installed OpenJDK.
	# Note that this is not using JVM_COMMON_BUILDPACK_DIR but the directory of the buildpack that
	# invoked this function to write it to the correct location.
	#
	# See: https://devcenter.heroku.com/articles/buildpack-api#composing-multiple-buildpacks
	cat <<-EOF >>"${host_buildpack_dir}/export"
		export JAVA_HOME=${openjdk_install_dir}
		export PATH=\$JAVA_HOME/bin:\$PATH
		export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server\${LD_LIBRARY_PATH:+:}\${LD_LIBRARY_PATH:-}"
	EOF

	# Source the export script manually here to ensure that other buildpacks that use this buildpack as a library
	# also have the correct environment variables available.
	# shellcheck source=/dev/null
	source "${host_buildpack_dir}/export"

	# Install an extension into the OpenJDK distribution extension folder should is exist. This will only
	# be the case for Java 8 as this OpenJDK feature was deprecated in 8u40.
	# This JAR file sets `sslmode=require` for the postgres drivers.
	local openjdk_jre_ext_dir="${openjdk_install_dir}/jre/lib/ext"
	if [[ -d "${openjdk_jre_ext_dir}" ]] && [[ -z "${SKIP_PGCONFIG_INSTALL:-}" ]] && [[ "${CI:-}" != "true" ]]; then
		util::curl_with_defaults --retry 3 -s -L "https://lang-jvm.s3.us-east-1.amazonaws.com/pgconfig.jar" -o "${openjdk_jre_ext_dir}/pgconfig.jar"
	fi

	# Apply the JDK overlay to the installed OpenJDK
	if [[ -d "${build_dir}/.jdk-overlay/" ]]; then
		_conditional_meta_set "app_has_jdk_overlay" "true"

		# Some symlinks need to be removed before the final cp command so that it doesn't fail.
		for path in jre/lib/security/cacerts lib/security/cacerts; do
			if [[ -f "${build_dir}/.jdk-overlay/${path}" ]] && [[ -f "${openjdk_install_dir}/${path}" ]]; then
				rm "${openjdk_install_dir}/${path}"
			fi
		done

		cp -r "${build_dir}/.jdk-overlay/"* "${openjdk_install_dir}"
	else
		_conditional_meta_set "app_has_jdk_overlay" "false"
	fi
}

# Deprecated legacy function to install OpenJDK, we're keeping it around to not break
# existing buildpacks that use it. If you're implementing a new buildpack, do not use
# this function.
install_java_with_overlay() {
	local build_dir="${1}"

	# The old API expected the cache directory as the second argument.
	# We're explicitly spelling this out here for documentation purposes,
	# but it's not used by the new OpenJDK installation function.
	# shellcheck disable=SC2034
	local cache_dir="${2}"

	# The old function didn't use an explicit buildpack directory but used the current working directory instead.
	install_openjdk "${build_dir}" "$(pwd)"
}

# This file will be included by other buildpacks that might not have or might not have set up
# the metadata file for reporting. To ensure we don't break those buildpacks but still be able to
# set metadata about OpenJDK, we have wrapper functions that check for a proper setup first.

_conditional_meta_set() {
	if type -t meta_set >/dev/null; then meta_set "${1}" "${2}"; fi
}

_conditional_meta_time() {
	if type -t meta_time >/dev/null; then meta_time "${1}" "${2}"; fi
}

source "${JVM_COMMON_BUILDPACK_DIR}/lib/legacy.sh"
legacy::install_removed_function_handler install_java validate_jdk_url is_java_version_change detect_java_version jdk_overlay
