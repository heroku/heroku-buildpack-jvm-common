#!/usr/bin/env bash

# This script is a utility for v2 buildpacks that manually download this buildpack to use as a library
# The `bin/java` script is meant to be sourced so that functions like `install_java_with_overlay` can
# be invoked.

JVM_COMMON_BUILDPACK_DIR="${JVM_COMMON_BUILDPACK_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)}"

# Some users use this buildpack outside of the Heroku platform where STACK might
# not be set. It should always default to the latest stack.
STACK="${STACK:-"heroku-24"}"

if [ "${STACK}" == "heroku-24" ]; then
	# This should always be the latest OpenJDK LTS major version
	# Next LTS will be OpenJDK 25 with a planned release date of 2025-09-16
	DEFAULT_JDK_VERSION="21"
else
	DEFAULT_JDK_VERSION="1.8"
fi

# shellcheck source=lib/output.sh
source "${JVM_COMMON_BUILDPACK_DIR}/lib/output.sh"
# shellcheck source=lib/inventory.sh
source "${JVM_COMMON_BUILDPACK_DIR}/lib/inventory.sh"
# shellcheck source=lib/java_properties.sh
source "${JVM_COMMON_BUILDPACK_DIR}/lib/java_properties.sh"

install_java_with_overlay() {
	local buildDir="${1}"

	if [ ! -f "${buildDir}/.jdk/bin/java" ]; then
		if [ -z "$(java_properties::get "${buildDir}/system.properties" "java.runtime.version")" ]; then
			if [ "${STACK}" == "heroku-24" ]; then
				output::warning <<-EOF
					WARNING: No OpenJDK version specified

					Your application does not explicitly specify an OpenJDK
					version. The latest long-term support (LTS) version will be
					installed. This currently is OpenJDK ${DEFAULT_JDK_VERSION}.

					This default version will change when a new LTS version is
					released. Your application might fail to build with the new
					version. We recommend explicitly setting the required OpenJDK
					version for your application.

					To set the OpenJDK version, add or edit the system.properties
					file in the root directory of your application to contain:

					java.runtime.version = ${DEFAULT_JDK_VERSION}
				EOF
			else
				output::warning <<-EOF
					WARNING: No OpenJDK version specified

					Your application does not explicitly specify an OpenJDK
					version. OpenJDK ${DEFAULT_JDK_VERSION} will be installed.

					This default version will change at some point. Your
					application might fail to build with the new version. We
					recommend explicitly setting the required OpenJDK version for
					your application.

					To set the OpenJDK version, add or edit the system.properties
					file in the root directory of your application to contain:

					java.runtime.version = ${DEFAULT_JDK_VERSION}
				EOF
			fi
		fi

		local jdkVersion
		jdkVersion="$(java_properties::get "${buildDir}/system.properties" "java.runtime.version")"
		jdkVersion="${jdkVersion:-${DEFAULT_JDK_VERSION}}"

		local jdkUrl
		jdkUrl=$(_get_jdk_url_with_default "${jdkVersion}")

		_jvm_mcount "version.${jdkVersion}"
		if [[ "$jdkVersion" == *openjdk* ]]; then
			output::step "Installing Heroku OpenJDK $(_get_openjdk_version "${jdkVersion}")"
			_jvm_mcount "vendor.openjdk"
		elif [[ "$jdkVersion" == *heroku* ]]; then
			output::step "Installing Heroku OpenJDK $(_get_heroku_version "${jdkVersion}")"
			_jvm_mcount "vendor.openjdk"
		elif [[ "$jdkVersion" == *zulu* ]]; then
			output::step "Installing Azul Zulu OpenJDK $(_get_zulu_version "${jdkVersion}")"
			_jvm_mcount "vendor.zulu"
		else
			output::step "Installing OpenJDK ${jdkVersion}"
			_jvm_mcount "vendor.default"
		fi

		install_java "${buildDir}" "${jdkVersion}" "${jdkUrl}"
		install_jdk_overlay "${buildDir}/.jdk" "${buildDir}"

	else
		output::step "Using provided JDK"
		_jvm_mcount "vendor.provided"
	fi
}

install_java() {
	local build_dir=${1}
	local jdkVersion="${2}"
	local jdkUrl=${3:-$(_get_jdk_url_with_default "${jdkVersion}")}

	local jdkDir="${build_dir}"/.jdk
	local javaExe="${jdkDir}/bin/java"
	mkdir -p "${jdkDir}"

	if [ ! -f "${javaExe}" ] || is_java_version_change "${jdkDir}" "${jdkVersion}"; then
		rm -rf "${jdkDir}"
		mkdir -p "${jdkDir}"

		if [ "$(curl_with_defaults --retry 3 --silent --head -w "%{http_code}" -L "${jdkUrl}" -o /dev/null)" != "200" ]; then
			output::error <<-EOF
				ERROR: Unsupported Java version: ${jdkVersion}

				Please check your system.properties file to ensure the java.runtime.version
				is among the list of supported version on the Dev Center:
				https://devcenter.heroku.com/articles/java-support#supported-java-versions
				You can also remove the system.properties from your repo to install
				the default ${DEFAULT_JDK_VERSION} version.
				If you continue to have trouble, you can open a support ticket here:
				https://help.heroku.com

				Thanks,
				Heroku
			EOF

			return 1
		fi

		# Download and extract OpenJDK distribution
		local jdk_tarball="/tmp/jdk.tgz"
		curl_with_defaults --retry 3 --silent --show-error --location "${jdkUrl}" --output "${jdk_tarball}"
		tar -pxzf "${jdk_tarball}" -C "${jdkDir}"
		rm "${jdk_tarball}"

		# Link base image Java keystore into the installed OpenJDK distribution, replacing the bundled
		# certificates. Linking ensures that when the application image is rebased, the certificates are
		# updated for JVM applications, even though the OpenJDK distribution itself doesn't change.
		if [ -f "${jdkDir}/jre/lib/security/cacerts" ] && [ -f "/etc/ssl/certs/java/cacerts" ]; then
			mv "${jdkDir}/jre/lib/security/cacerts" "${jdkDir}/jre/lib/security/cacerts.old"
			ln -s "/etc/ssl/certs/java/cacerts" "${jdkDir}/jre/lib/security/cacerts"
		elif [ -f "${jdkDir}/lib/security/cacerts" ] && [ -f "/etc/ssl/certs/java/cacerts" ]; then
			mv "${jdkDir}/lib/security/cacerts" "${jdkDir}/lib/security/cacerts.old"
			ln -s "/etc/ssl/certs/java/cacerts" "${jdkDir}/lib/security/cacerts"
		fi

		echo "${jdkVersion}" >"${jdkDir}/version"
		if [ ! -f "${javaExe}" ]; then
			output::error <<-EOF
				Unable to retrieve the JDK.
			EOF

			return 1
		fi
	fi

	export JAVA_HOME=${jdkDir}
	export PATH="${jdkDir}/bin:${PATH}"

	# Download Heroku JVM metrics agent JAR
	mkdir -p "${build_dir}/.heroku/bin"
	curl_with_defaults --retry 3 -s -o "${build_dir}/.heroku/bin/heroku-metrics-agent.jar" -L "${HEROKU_METRICS_JAR_URL:-"https://repo1.maven.org/maven2/com/heroku/agent/heroku-java-metrics-agent/4.0.1/heroku-java-metrics-agent-4.0.1.jar"}"

	# Copy profile.d scripts
	local profile_d_dir="${build_dir}/.profile.d"
	mkdir -p "${profile_d_dir}"

	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/jvmcommon.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/default-proc-warning.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/jdbc.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/jvm-redis.sh" "${profile_d_dir}"
	cp "${JVM_COMMON_BUILDPACK_DIR}/opt/heroku-jvm-metrics.sh" "${profile_d_dir}"

	# Install tool scripts
	cp -r "${JVM_COMMON_BUILDPACK_DIR}/opt/tools/"* "${build_dir}/.heroku"

	# Write export script for subsequent buildpacks to ensure they can use the installed OpenJDK.
	# See: https://devcenter.heroku.com/articles/buildpack-api#composing-multiple-buildpacks
	cat <<-EOF >"${JVM_COMMON_BUILDPACK_DIR}/export"
		export JAVA_HOME=${JAVA_HOME}
		export PATH=\$JAVA_HOME/bin:\$PATH
		export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server:\${LD_LIBRARY_PATH:-}"
	EOF

	# Install an extension into the OpenJDK distribution extension folder should is exist. This will only
	# be the case for Java 8 as this OpenJDK feature was deprecated in 8u40.
	# This JAR file sets `sslmode=require` for the postgres drivers.
	local extDir="${JAVA_HOME}/jre/lib/ext"
	if [[ -d "${extDir}" ]] && [[ -z "${SKIP_PGCONFIG_INSTALL:-}" ]] && [[ "${CI:-}" != "true" ]]; then
		curl_with_defaults --retry 3 -s -L "https://lang-jvm.s3.us-east-1.amazonaws.com/pgconfig.jar" -o "${extDir}/pgconfig.jar"
	fi
}

is_java_version_change() {
	jdkDir=$1
	jdkVersion=${2:-${DEFAULT_JDK_VERSION}}
	if [ ! -d "${jdkDir}" ]; then
		echo "Invalid JDK directory."
		return 1
	fi
	test -f "${jdkDir}/version" && [ "$(cat "${jdkDir}/version")" != "${jdkVersion}" ]
}

# Legacy functions for backwards compatability
detect_java_version() {
	local jdkVersion
	jdkVersion="$(java_properties::get "${1}/system.properties" "java.runtime.version")"
	jdkVersion="${jdkVersion:${DEFAULT_JDK_VERSION}}"

	echo "${jdkVersion}"
}

jdk_overlay() {
	local buildDir="${1}"
	install_jdk_overlay "${buildDir}/.jdk" "${buildDir}"
}

# Internal functions

install_jdk_overlay() {
	local jdkDir="${1:?}"
	local appDir="${2:?}"
	local cacertPath="lib/security/cacerts"
	shopt -s dotglob

	if [ -d "${jdkDir}" ] && [ -d "${appDir}/.jdk-overlay" ]; then
		# delete the symlink because a cp will error
		if [ -f "${appDir}/.jdk-overlay/jre/${cacertPath}" ] && [ -f "${jdkDir}/jre/${cacertPath}" ]; then
			rm "${jdkDir}/jre/${cacertPath}"
		elif [ -f "${appDir}/.jdk-overlay/${cacertPath}" ] && [ -f "${jdkDir}/${cacertPath}" ]; then
			rm "${jdkDir}/${cacertPath}"
		fi

		cp -r "${appDir}/.jdk-overlay/"* "${jdkDir}"
	fi
}

# This function implements a legacy behavior in which the JDK_URL_1_8 or similar config var
# could be used to override the URL to the JDK binary for a specific version. It's
# not supported in the v3 implementation of the buildpack.
_get_jdk_url_with_default() {
	local jdkVersion="${1:?}"
	if [ -n "${JDK_URL_1_7:-}" ] && { [ "$(expr "${jdkVersion}" : '^1.7')" != 0 ] || [ "$(expr "${jdkVersion}" : '^7')" != 0 ]; }; then
		echo "$JDK_URL_1_7"
	elif [ -n "${JDK_URL_1_8:-}" ] && { [ "$(expr "${jdkVersion}" : '^1.8')" != 0 ] || [ "$(expr "${jdkVersion}" : '^8')" != 0 ]; }; then
		echo "$JDK_URL_1_8"
	elif [ -n "${JDK_URL_1_9:-}" ] && { [ "$(expr "${jdkVersion}" : '^1.9')" != 0 ] || [ "$(expr "${jdkVersion}" : '^9')" != 0 ]; }; then
		echo "$JDK_URL_1_9"
	elif [ -n "${JDK_URL_10:-}" ] && [ "$(expr "${jdkVersion}" : '^10')" != 0 ]; then
		echo "$JDK_URL_10"
	elif [ -n "${JDK_URL_11:-}" ] && [ "$(expr "${jdkVersion}" : '^11')" != 0 ]; then
		echo "$JDK_URL_11"
	elif [ -n "${JDK_URL_12:-}" ] && [ "$(expr "${jdkVersion}" : '^12')" != 0 ]; then
		echo "$JDK_URL_12"
	elif [ -n "${JDK_URL_13:-}" ] && [ "$(expr "${jdkVersion}" : '^13')" != 0 ]; then
		echo "$JDK_URL_13"
	else
		inventory::query "${jdkVersion}" "${STACK}" | jq -r ".url"
	fi
}

_get_zulu_version() {
	echo "${1//zulu-/}"
}

_get_openjdk_version() {
	echo "${1//openjdk-/}"
}

_get_heroku_version() {
	echo "${1//heroku-/}"
}

_jvm_mcount() {
	if type -t mcount >/dev/null; then mcount "jvm.${1}"; fi
}
